openapi: 3.0.0
info:
  title: WASAPhoto
  description: |
    API for WASAPhoto social Project.
    Each user will be presented with a stream of photos (images) in reverse chronological order, with
    information about when each photo was uploaded (date and time) and how many likes and comments
    it has. The stream is composed by photos from “following” (other users that the user follows). Users
    can place (and later remove) a “like” to photos from other users. Also, users can add comments to any
    image (even those uploaded by themself). Only authors can remove their comments.
    Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about
    Alice. Alice can decide to remove the ban at any moment.
    Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse
    chronological order), how many photos have been uploaded, and the user’s followers and following.
    Users can change their usernames, upload photos, remove photos, and follow/unfollow other users.
    Removal of an image will also remove likes and comments.
    A user can search other user profiles via username.
    A user can log in just by specifying the username.
  version: 1.0.0
servers: 
  - url: 'http://localhost:3000'
tags:
  - name: login
    description: Operation related to login
  - name: user
    description: Operation related to the user
  - name: stream
    description: Operation related to the stream of photos of the user
  - name: photos
    description: Operation related to the photos of the user
  - name: likes
    description: Operation related to the likes of the user
  - name: comments
    description: Operation related to the comments of the user
  - name: follows
    description: Operation related to the follows of the user
  - name: bans
    description: Operation related to the bans of the user
  - name: search
    description: Operation related to search other users
paths:

############## Simplified login ##############

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfilePrototype'
        required: true
      responses:
        '200':
          description: log-in action successful
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
              examples:
                example1:
                  value:
                    username: "Maria"
                    identifier: "abc123"
                    isNewUser: false
        '201':
          description: User created and log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
              examples:
                example1:
                  value:
                    username: "Maria"
                    identifier: "abc123"
                    isNewUser: true
        '400':
          $ref: '#/components/responses/BadRequest'
                    
############## User action ##############

#-------Profile-------#

  /users/search:
    get:
      security:
      - bearerAuth : []
      tags: ["search"]
      summary: Search user profile by username
      operationId: searchUser
      description: search other user by Username and get their profile
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        "200":
          $ref: '#/components/responses/UserProfile'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/BannedUser'
        '404':
          $ref: '#/components/responses/UserNotFound'
  /users/{userId}/editProfile:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      security:
      - bearerAuth : []
      tags: ["user"]
      description: allows to set a new username
      summary: Set a new Username
      operationId: SetMyUserName
      requestBody:
        description: new username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfilePrototype'
        required: true
      responses:
        "201":
          description: username updated
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfilePrototype'
              examples:
                example1:
                  value:
                   username: "Alessandro"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{userId}/profile:
    parameters:
    - $ref: '#/components/parameters/userId'
    get:
      security:
      - bearerAuth : []
      tags: ["user"]
      description: allows to get the profile of the logged user
      summary: Get user profile
      operationId: getUserProfile
      responses:
        "200":
          description: successfully return user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              examples:
                example1:
                  value:
                    userId: "123"
                    name: "Maria"
                    followerCount: 10
                    followingCount: 5
                    photosCount: 20
                    bannedUser: ["456", "789"]
        "401":
          $ref: '#/components/responses/UnauthorizedError'


#-------stream of Photos-------#

  /users/{userId}/stream:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      security:
      - bearerAuth : []
      tags: ['stream']
      summary: Get my photos stream
      description: go to my personal stream of photos
      operationId: getMyStream
      responses:
        "200":
          description: Successfully show my photo stream
          content:
            application/json:
              schema:
                description: |
                  Shows the photos of the account followed by the user logged in reverse chronological order
                type: object
                properties:
                  photos:
                    description: List of photos
                    type: array
                    items:
                      $ref: '#/components/schemas/Photo'
                    minItems: 1
                    maxItems: 100
              examples:
                example1:
                  value:
                    photos:
                      - photoId: "abc123"
                        url: "https://example.com/Users/{userId}/photos/{photosId}"
                        timestamp: "2024-05-16T17:24:49.408Z"
                        likes: ["1","2324","44"]
                        comments: ["ciao come stai?"]
        "401":
          $ref: '#/components/responses/UnauthorizedError'

#-------Photos-------#

  /users/{userId}/photos:
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      security:
      - bearerAuth : []
      tags: ["photos"]
      description: allows to upload a new photo and return the id of the photos
      summary: Upload a new photo
      operationId: uploadPhoto
      requestBody:
        required: true
        description: new photo
        content:
          multipart/form-data:
            schema:
              type: object
              description: photo to upload
              properties:
                photo:
                  description: The photo to upload
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 64
      responses:
        "201":
          description: photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
              examples:
                example1:
                  value:
                    photosId: "abc123"
                    url: "https://example.com/Users/{userId}/photos/{photosId}"
                    timestamp: "2024-05-16T17:24:49.408Z"
                    likes: ["1","32"]
                    comments: [""]
        "401":
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/photos/{photosId}:
    parameters:
      - $ref: '#/components/parameters/userId'    
      - $ref: '#/components/parameters/photosId'
    delete:
      security:
      - bearerAuth : []
      tags: ["photos"]
      summary: Delete a photo
      description: Deletes a photo belonging to the authenticated user.
      operationId: deletePhoto
      responses:
        '204':
          description: |
            Photo and his likes and comments deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
      - bearerAuth : []
      tags: ["photos"]
      description: allows to get a photo
      summary: Get a photo
      operationId: getPhoto
      responses:
        "200":
          description: successfully return photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
              examples:
                example1:
                  value:
                    photosId: "abc123"
                    url: "https://example.com/Users/{userId}/photos/{photosId}"
                    timestamp: "2024-05-16T17:24:49.408Z"
                    likes: ["1","32"]
                    comments: [""]
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/UserNotFound'

#-------Photo likes-------#

  /users/{userId}/photos/{photosId}/likes:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/photosId'
    post:
      security:
      - bearerAuth : []
      tags: ["likes"]
      description: allows to like photos
      summary: like photos
      operationId: likePhoto
      responses:
        "201":
          $ref: "#/components/responses/LikePhoto"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
  
  /users/{userId}/photos/{photosId}/likes/{likeId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/photosId'
      - $ref: '#/components/parameters/likeId'
    delete:
      security:
      - bearerAuth : []
      tags: ["likes"]
      description: allows to unlike Photo
      summary: unlike photos
      operationId: unlikePhoto
      responses:
        "204":
          description: photo like removed
        "401":
          $ref: '#/components/responses/UnauthorizedError'
          
#-------Photo comments-------#

  /users/{userId}/photos/{photosId}/comments:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/photosId'
    post:
      security:
      - bearerAuth : []
      tags: ["comments"]
      description: allows to comment photos
      summary: comment photos
      operationId: commentPhoto
      responses:
        "201":
          description: photo commented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              examples:
                example1:
                  value:
                    commentId: "123"
                    text: "ciao come stai?"
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
      - bearerAuth : []
      tags: ["comments"]
      description: get comments on a photo
      summary: retrieve comments for a photo
      operationId: GetPhotoComments
      responses:
        "200":
          description: successfully retrieve comments
          content:
            application/json:
              schema:
                description: list of comments
                type: object
                properties:
                  comments:
                    description: list of comments
                    type: array
                    minItems: 0
                    maxItems: 1000
                    items: 
                      $ref: "#/components/schemas/Comment"
              examples:
                example:
                  value:
                    comments:
                      - commentId: "123"
                        userId: "1"
                        text: "Nice photo"
                      - commentId: "12"
                        userId: "32"
                        text: "You are great"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404": 
          $ref: "#/components/responses/UserNotFound"

  /users/{userId}/photos/{photosId}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/photosId'
      - $ref: '#/components/parameters/commentId'
    delete:
      security:
      - bearerAuth : []
      tags: ["comments"]
      description: allows to delete comment on photos
      summary: comments on photos
      operationId: uncommentPhoto
      responses:
        "204":
          description: comment deleted successfully
        "401":
          $ref: '#/components/responses/UnauthorizedError'


#-------follows e followers-------#

  /users/{userId}/follows:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      security:
      - bearerAuth : []
      tags: ["user"]
      description: get the list of follows
      summary: retrieve list of follows for the user
      operationId: getUserfollows
      responses:
        "200": 
          description: successfully retrieve follows list
          content:
            application/json: 
              schema:
                description: list of follows
                type: object
                properties:
                  follows:
                    description: list of follows
                    type: array
                    minItems: 0
                    maxItems: 1000
                    items:
                      type: string
              examples:
                example:
                  value:
                    follows:
                      - "123"
                      - "1234"
                      - "40"
        "401": 
          $ref: "#/components/responses/UnauthorizedError"
        "404": 
          $ref: "#/components/responses/UserNotFound"

  /users/{userId}/follows/{followedId}:
    parameters:
      - $ref: '#/components/parameters/followedId'
      - $ref: '#/components/parameters/userId'
    post:
      security:
      - bearerAuth : []
      tags: ["follows"]
      description: allows to follows other accounts
      summary: follow another account
      operationId: followUser
      responses:
        "201":
          $ref: '#/components/responses/FollowUser'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags: ["follows"]
      description: allows to unfollows other accounts
      summary: another account
      operationId: unfollowUser
      responses:
        "200":
          $ref: '#/components/responses/UnfollowUser'
        "401":
          $ref: '#/components/responses/UnauthorizedError'

  /users/{userId}/followers:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      security:
      - bearerAuth : []
      tags: ["user"]
      description: get the list of followers
      summary: retrieve list of followers for the user
      operationId: getUserfollowers
      responses:
        "200": 
          description: successfully retrieve followers list
          content:
            application/json: 
              schema:
                description: list of followers
                type: object
                properties:
                  followers:
                    description: list of followers
                    type: array
                    items:
                      type: string
                    minItems: 0
                    maxItems: 1000
              examples:
                example:
                  value:
                    followers:
                      - "123"
                      - "1234"
                      - "40"
        "401": 
          $ref: "#/components/responses/UnauthorizedError"
        "404": 
          $ref: "#/components/responses/UserNotFound"
          
#-------ban-------#

  /users/{userId}/bans/{bannedId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/bannedId'
    post:
      security:
      - bearerAuth : []
      tags: ["bans"]
      description: allows to ban other accounts
      summary: ban another account
      operationId: banUser
      responses:
        "201":
          $ref: '#/components/responses/BanUser'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      security:
      - bearerAuth : []
      tags: ["bans"]
      description: allows to ban other accounts
      summary: unban another account
      operationId: unbanUser
      responses:
        "200":
          $ref: '#/components/responses/UnbanUser'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: string
      description: User ID used as bearer token
  responses:
    LikePhoto:
      description: Like a photo
      content:
        application/json:
          schema:
            description: Like a photo
            type: object
            properties:
              userId:
                description: user to like photo
                type: string
                example: "123"
              userPhotoId:
                description: user that posted the photo
                type: string
                example: "1"
              photoId:
                description: Photo unique identifier
                type: string
                example: "1234"
              likeId:
                description: like unique identifier
                type: string
                example: "134"
    FollowUser: 
      description: Follow another User
      content:
        application/json:
          schema:
            description: Follow another user
            type: object
            properties:
              followsId:
                description: followed User
                type: string
                example: "1"
              userId:
                description: user to issue the follow
                type: string
                example: "123"
    UnfollowUser: 
      description: Unfollow another User
      content:
        application/json:
          schema:
            description: Unfollow another user
            type: object
            properties:
              followsId:
                description: Unfollowed User
                type: string
                example: "1"
              userId:
                description: user to issue the unfollow
                type: string
                example: "123"
    BanUser: 
      description: Ban another User
      content:
        application/json:
          schema:
            description: ban another user
            type: object
            properties:
              bannedId:
                description: bannedUser
                type: string
                example: "1"
              userId:
                description: user to issue ban
                type: string
                example: "123"
    UnbanUser: 
      description: Unban another User
      content:
        application/json:
          schema:
            description: Unban another user
            type: object
            properties:
              bannedId:
                description: bannedUser
                type: string
                example: "1"
              userId:
                description: user to issue unban
                type: string
                example: "123"
    UnauthorizedError:
      description: Access identifier is missing or invalid
      content:
        application/json:
          schema:
            description: Unauthorized error
            type: object
            properties:
              message:
                description: Error message
                type: string
                example: Unauthorized
              code:
                type: integer
                example: 401
                description: HTTP status code
    BannedUser:
      description: Forbidden, you are banned from viewing this profile
      content:
        application/json:
          schema:
            description: Banned user error
            type: object
            properties:
              message:
                description: Error message
                type: string
                example: You are banned from viewing this profile
              code:
                type: integer
                example: 403
                description: HTTP status code
    UserNotFound:
      description: A user with the specified ID was not found.
      content:
        application/json:
          schema:
            description: User not found error
            type: object
            properties:
              message:
                description: Error message
                type: string
                example: User not found
              code:
                type: integer
                example: 404
                description: HTTP status code
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            description: Bad request
            type: object
            properties:
              message:
                description: Error message
                type: string
                example: Bad Request
              code:
                type: integer
                example: 400
                description: HTTP status code
    UserProfile:
      description: Successfully return user profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
          examples:
            example1:
              value:
                userId: "123"
                name: "Maria"
                followerCount: 10
                followingCount: 5
                photosCount: 20
                bannedUser: ["456", "789"]
  parameters:
    username:
      name: username
      in: query
      required: true
      description: Username of the user to search
      schema:
        description: Username of the user to search
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    userId:
      name: userId
      in: path
      required: true
      description: ID of the user
      schema:
        description: ID of the user
        type: string    
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    commentId:
      name: commentId
      in: path
      required: true
      description: ID of the comment to delete
      schema:
        description: ID of the comment to delete
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    likeId:
      name: likeId
      in: path
      required: true
      description: ID of the like to delete
      schema:
        description: ID of the like to delete
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    bannedId:
      name: bannedId
      in: path
      required: true
      description: ID of the user to ban/unban
      schema:
        description: ID of the user to ban/unban
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    followedId:
      name: followedId
      in: path
      required: true
      description: ID of the user to follow/unfollow
      schema:
        description: ID of the user to follow/unfollow
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
    photosId:
      name: photosId
      in: path
      description: ID of the photo
      required: true
      schema:
        description: ID of the photo
        type: string
        pattern: '^.*?$'
        minLength: 1
        maxLength: 20
  schemas:
    UserProfilePrototype:
      description: User details
      type: object
      properties:
        username:
          type: string
          example: Maria
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          description: The name of the user
    Identifier:
      description: User identifier
      type: object
      properties:
        username:
          type: string
          example: Maria
          description: The name of the user
        userId:
          # change here if you decide to use an integer
          # or any other type of identifier
          type: string
          example: "abcdef012345"
          description: The unique identifier of the user
        isNewUser:
          type: boolean
          example: false
          description: Indicates if the user is new
    Photo:
      description: Photo details
      type: object
      properties:
        photoId:
          type: string
          description: The unique identifier of the photo
        url:
          type: string
          format: url
          description: The URL where the photo is stored in the database
        timestamp:
          type: string
          format: date-time
          description: The date and time when the photo was uploaded
        likes:
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: string
            description: IDs of the user who liked the photo
          description: user who liked the photo
        comments:
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: string
            description: text of the comment
          description: list of comments
    Comment:
      description: Comment details
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the user who commented
        photosId:
          type: string
          description: The unique identifier of the photo
        commentId:
          type: string
          description: The unique identifier of the comment
        text:
          type: string
          description: text of the comment
    UserProfile:
      description: User profile
      type: object
      properties:
        followerCount:
          type: integer
          description: The number of followers
        followers:
          type: array
          minItems: 0
          maxItems: 1000
          items:
            type: string
            description: follower user ID
          description: list of followers User IDs
        followingCount:
          type: integer
          description: The number of users followed
        follows:
          type: array
          minItems: 0
          maxItems: 1000
          items:
            type: string
            description: follow user ID
          description: list of follows User IDs
        photosCount:
          type: integer
          description: The number of photos uploaded
        bannedUser:
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: string
            description: banned user ID
          description: The list of banned users
security:
  - bearerAuth: []
